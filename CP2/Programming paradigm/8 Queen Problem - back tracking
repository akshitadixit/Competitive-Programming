#include <bits/stdc++.h>
using namespace std;

#define REP(i,a,b) for(int i=a;i<b;i++)
#define FOR(i,n) REP(i,0,n)
#define REP1(i,a,b) for(int i=a;i<=b;i++)
#define FOR1(i,n) REP1(i,1,n)
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)

#define INF 1000000000
#define MOD 1000000007

#define pb push_back
#define mp make_pair

#define MEM(a,b) memset(a,(b),sizeof(a))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define F first
#define S second

typedef long long LL;
typedef pair<int,int> ii;
typedef vector<int> vi;

int row[8], TC, a, b, lineCounter;

bool place(int r, int c) {
        for (int prev = 0; prev < c; prev++)                                    /*check previously placed queens */
                if (row[prev] == r || (abs(row[prev] - r) == abs(prev - c)))    /*share same row or same diagonal -> infeasible*/
                        return false;
        return true; 
}

void backtrack(int c) {
        if (c == 8 && row[b] == a) {                                            /*candidate sol, (a, b) has 1 queen*/
                printf("%2d      %d", ++lineCounter, row[0] + 1);
                for (int j = 1; j < 8; j++) 
                        printf(" %d", row[j] + 1);
                printf("\n"); 
        }

        for (int r = 0; r < 8; r++){                                            /*try all possible row*/
                if (place(r, c)){                                               /*if can place a queen at this col and row*/
                        row[c] = r; 
                        backtrack(c + 1);                                       /*put this queen here and recurse*/
                }
        }
}

int main() {
        scanf("%d", &TC);
        while (TC--) {
                scanf("%d %d", &a, &b); a--; b--;
                memset(row, 0, sizeof row); lineCounter = 0;
                printf("SOLN       COLUMN\n");
                printf(" #      1 2 3 4 5 6 7 8\n\n");
                backtrack(0);
                if (TC) printf("\n");
        } 
        return 0;
}